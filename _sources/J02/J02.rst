Низови података и линијски дијаграми
=====================================


У овој лекцији ћеш научити:
1. како се записују низови података; и
2. како се приказују низови података линијским дијаграмима.

Записивање низова података
---------------------------

Низови података се у Пајтону записују унутар угластих заграда, у облику *листе*. На пример, оцене неког ученика из једног предмета могу да се запишу као низ овако:

.. ipython::

   In [1]: ocene = [2, 4, 5, 3, 5]

Систем није вратио никакав излаз, наравно. Он је само констатовао да променљива ``ocene`` сада садржи низ који се састоји од пет бројева. Да бисмо се уверили да је то тако, затражићемо од система да израчуна следећи израз:

.. ipython::

   In [1]: ocene

Могуће је радити и са низовима стрингова:

.. ipython::

   In [1]: predmeti = ["matematika", "srpski", "likovno", "istorija", "fizicko"]

Систем ни овај пут није вратио никакав излаз, већ је само запамтио да променљива ``predmeti`` сада садржи низ од пет стрингова (имена предмета). Ево садржаја променљиве ``predmeti``:

.. ipython::

   In [1]: predmeti

Дужину низа можемо добити позивом уграђене функције ``len`` (што је скраћеница енглеске речи *length* која значи "дужина"):

.. ipython::

   In [1]: len(predmeti)


Приказивање низова података
----------------------------

У наредној ћелији приказан је процењени број становника наше планете у разним историјским периодима, при чему је број људи исказан у милијардама:

.. ipython::

   In [1]: godine = [1000,  1500, 1650, 1750, 1804, 1850, 1900, 1930, 1950, 1960, 1974, 1980, 1987, 1999, 2011, 2020, 2023, 2030, 2037, 2045, 2055, 2100]
      ...: ljudi  = [0.275, 0.45, 0.5,  0.7,  1,    1.2,  1.6,  2,    2.55, 3,    4,    4.5,  5,    6,    7,    7.8,  8,    8.5,  9,    9.5,  10,   11.2]


Желели бисмо да прикажемо ове податке у виду графикона. Пајтон има разне библиотеке за визуелизацију података, а ми ћемо користити библиотеку која се зове ``matplotlib.pyplot``. Пошто је ово име веома дугачко и компликовано и пошто ће нам требати много функција из те библиотеке нећемо увозити функције једну по једну већ ћемо увести целу библиотеку и при томе јој дати краће име (такорећи, надимак) ``plt``. (Енглеска реч *plot* значи "исцртати", а ``plt`` је скраћено од ``plot``.)

.. ipython::

   In [1]: import matplotlib.pyplot as plt

Сада су нам све функције из ове библиотеке доступне. Важно је напоменути да *један* ``import`` *важи за целу радну свеску!* Дакле, довољно је библиотеку увести једном у радној свесци. Такође је важно рећи да ћемо у новој радној свесци морати поново да "импортујемо" библиотеке које нам требају за рад.

**Један импорт по радној свесци!**

Ако се забуниш па покушаш библиотеку да импортујеш два пута -- нема бриге. Пајтон се неће бунити, али неће губити време на то да два пута учитава исту библиотеку.

Натраг на цртање графикона. Најједноставнији графикон се може добити овако:

.. ipython::
   :okwarning:

   @savefig J02slika1.png
   In [1]: plt.plot(godine, ljudi)
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close();

      
Функција ``plot(godine, ljudi)`` каже систему да треба нацртати графикон коме су на хоризонталну осу (:math:`x`-оса)
нанети подаци из низа ``godine``, а на вертикалну осу (:math:`y`-оса) подаци из низа ``ljudi``.
Функција ``show`` потом приказује графикон. (Енглеска реч *plot* значи "исцртати", а енглеска реч *show* значи "приказати".)

Видимо да су подаци представљени линијом. Зато се ова врста графикона зове *линијски графикон*.

Пошто нисмо увозили појединачне функције већ смо целу библиотеку увезли под надимком ``plt``, функције ``plot`` и ``show``
морамо да позовемо "пуним презименом и именом": ``plt.plot`` и ``plt.show``.

У наредном кораку ћемо графикону додати наслов користећи функцију ``title`` (енглеска реч *title* значи "наслов"):

.. ipython::
   :okwarning:

   @savefig J02slika2.png
   In [1]: plt.plot(godine, ljudi)
      ...: plt.title("Broj stanovnika na Zemlji")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close();

Можемо ставити ознаку и на вертикалну осу да бисмо нагласили да се ради о бројевима који су исказани у милијардама. За то користимо функцију ``ylabel`` ("ознака на :math:`y`-оси"; енглеска реч *label* значи "ознака"):

.. ipython::
   :okwarning:

   @savefig J02slika3.png
   In [1]: plt.plot(godine, ljudi)
      ...: plt.title("Broj stanovnika na Zemlji")
      ...: plt.ylabel("(milijarde)")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close();

Да закључимо: функцијама ``plot``, ``title`` и ``ylabel`` додајемо податке на графикон, и тек када смо унели све податке које желимо да имамо на графикону цртамо графикон позивом функције ``show``.

Ево и кратког видеа који илуструје оно што смо до сада видели:

.. ytpopup:: bFIYUdTmxvU
   :width: 735
   :height: 415
   :align: center

Задаци
-------

За вежбу покрени Џупитер окружење и реши задатке из радне свеске J02.ipynb
