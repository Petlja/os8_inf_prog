Бројачи и суме
:::::::::::::::::

У овој лекцији

1. уводимо појам бројача,
2. показујемо како се рачунају суме, и
3. то знање примењујемо на проблем рачунања просека низа бројева.

Бројач
-----------

Често је потребно да пребројимо колико у низу има елемената који имају неку особину.
Стандардни начин да се ова врста проблема реши је да се једна променљива задужи за
посао бројања и онда се она зове *бројач*.

Пример.
'''''''

Написати Пајтон функцију ``prebroj_petice`` која у датом списку оцена броји петице. На пример,

.. code-block:: python

   prebroj_petice([3, 1, 5, 4, 5, 2, 5])

треба да врати 3 зато што наведени списак оцена садржи три петице.

*Решење.*

.. code-block:: python

   def prebroj_petice(spisak):
       broj = 0
       for ocena in spisak:
           if ocena == 5: broj += 1
       return broj

Функција ``prebroj_petice`` прими списак оцена у коме треба да преброји петице и онда се понаша овако.

1. Променљива ``broj`` ће бројати петице. Пошто још нисмо кренули са провером оцена, постављамо њену вредност на 0 (за сада нисмо наишли ни на једну петицу).
2. Наредбом ``for ocena in spisak:`` пролазимо кроз ``spisak`` тако што променљива ``ocena`` редом узима вредности које су наведене на списку. Према томе, за сваку оцену са списка ћемо проверити да ли је једнака са 5, и ако јесте увећаћемо вредност променљиве ``broj``.
3. На крају враћамо вредност променљиве ``broj`` као резултат рада функције.

Да погледамо како функција ради:

.. activecode:: primer2-1
   :coach:

   def prebroj_petice(spisak):
       broj = 0
       for ocena in spisak:
           if ocena == 5: broj += 1
       return broj

   print(prebroj_petice([3, 1, 5, 4, 5, 2, 5]))

Пример.
'''''''

Написати Пајтон функцију ``prebroj_ocene`` која броји колико пута се у датом списку оцена појављује дата оцена.
На пример,

.. code-block:: python

    prebroj_ocene([3, 1, 5, 4, 5, 2, 5], 4)

треба да врати 1 зато што наведени списак оцена садржи само једну четворку.

*Решење.*

.. code-block:: python

   def prebroj_ocene(spisak, n):
       broj = 0
       for ocena in spisak:
           if ocena == n: broj += 1
       return broj

Пример*.
''''''''

Написати Пајтон функцију ``prebroj_cifre`` која за дати позитиван цео број утврђује колико он има цифара. На пример,

.. code-block:: python

   prebroj_cifre(12487)

треба да врати 5 зато што број 12487 има 5 цифара.

*Решење.*

.. code-block:: python

   def prebroj_cifre(n):
       br_cif = 0
       while n > 0:
           br_cif += 1
           n //= 10
       return br_cif

Идеја програма је следећа.

.. code-block:: python

    све док број "има још цифара":
        увећај број цифара за 1
        "откини" последњу цифру броја

Условом ``n > 0`` проверавамо да ли је остала још нека цифра у броју,
док командом ``n //= 10`` "откинемо" последњу цифру броја. Ево примера:

.. activecode:: primer2-2
   :coach:

   n = 12487
   n //= 10
   print(n)

Ето: "откинули" смо последњу цифру броја *n*. Да пробамо да "откинемо" последње две цифре броја *n*:

.. activecode:: primer2-3
   :coach:

   n = 12487
   n //= 10
   n //= 10
   print(n)

Дакле, у сваком пролази кроз петљу броју *n* (крволочно) "откинемо" по једну цифру, па када падне на нулу знамо да смо му откинули све цифре, и тако смо сигурни да смо их све и пребројали.

Да проверимо функцију:

.. activecode:: primer2-4
   :coach:

   def prebroj_cifre(n):
       br_cif = 0
       while n > 0:
           br_cif += 1
           n //= 10
       return br_cif

   print(prebroj_cifre(12487))


Пример.
'''''''

Подсетимо се да уграђена функција ``len`` одређује број елемената у низу. Она се може испрограмирати овако (мада је, наравно, увек ефикасније позвати уграђену функцију):

.. code-block:: python

   def duzina_niza(niz):
       broj = 0
       for x in niz:
           broj += 1
       return broj


Збир елемената низа
------------------------

Често је потребно сабрати елементе неког низа бројева, што можемо урадити следећом Пајтон функцијом:

.. code-block:: python

   def saberi(L):
       zbir = 0
       for x in L:
           zbir += x
       return zbir

Функција ``saberi`` прими низ бројева који треба сабрати и ради овако.

1. Променљива ``zbir`` ће полако акумулирати збир. Пошто још нисмо кренули са сабирањем, постављамо њену вредност на 0.
2. Наредбом ``for x in L:`` пролазимо кроз низ ``L`` тако што променљива ``x`` редом узима вредности које су наведене у низу. Тако постижемо да елементе низа, један по један, додајемо на збир ``zbir``.
3. На крају враћамо вредност променљиве ``zbir`` као резултат рада функције.

Да погледамо како функција ради:

.. activecode:: primer2-5
   :coach:

   def saberi(L):
       zbir = 0
       for x in L:
           zbir += x
       return zbir

   print(saberi([3,1,2,4,9,0,-6]))

Пример.
'''''''

Милица добија џепарац који је сваког месеца исти. За следећи месец Милица је испланирала низ трошкова.
Написати Пајтон функцију ``dzeparac_je_dovoljan`` која проверава да ли ће Милица моћи да својим џепарцем
покрије све планиране трошкове. Функција треба да прими два податка: висину њеног џепарца и списак трошкова,
и треба да испише поруку о томе да ли су њени планови реални. Функција не враћа никакву вредност.

На пример,

.. code-block:: python

   dzeparac_je_dovoljan(1500, [250, 500, 100, 100, 100, 100, 100])

треба да испише:
    
.. code-block:: python

   Dzeparac je dovoljan

док
    
.. code-block:: python

   dzeparac_je_dovoljan(1500, [250, 500, 200, 300, 100, 100, 100])

треба да испише:
    
.. code-block:: python

   Dzeparac NIJE dovoljan

*Решење.*

.. code-block:: python

   def dzeparac_je_dovoljan(dzeparac, troskovi):
       ukupni_troskovi = saberi(troskovi)
       if dzeparac >= ukupni_troskovi:
           print("Dzeparac je dovoljan")
       else:
           print("Dzeparac NIJE dovoljan")

Да видимо како функција ради:

.. activecode:: primer2-6
   :coach:

   def saberi(L):
       zbir = 0
       for x in L:
           zbir += x
       return zbir

   def dzeparac_je_dovoljan(dzeparac, troskovi):
       ukupni_troskovi = saberi(troskovi)
       if dzeparac >= ukupni_troskovi:
           print("Dzeparac je dovoljan")
       else:
           print("Dzeparac NIJE dovoljan")

   dzeparac_je_dovoljan(1500, [250, 500, 200, 300, 100, 100, 100])


Напомена.
'''''''''''''''

Подсетимо се да уграђена функција ``sum`` одређује збир елемената у низу, попут функције ``saberi``
коју смо видели раније. Наравно, увек је ефикасније позвати уграђену функцију него нашу функцију.


Просек елемената низа
--------------------------

Да се подсетимо, *просек* низа бројева се рачуна овако:

.. math::

  \hbox{просек низа } [x_1, x_2, \dots, x_n] = \frac{x_1 + x_2 + \dots + x_n}{n}.


Дакле, да бисмо добили просек низа бројева саберемо све елементе низа и тако добијени број поделимо дужином низа.

У Пајтону се обе ове активности могу обавити позивом одговарајуће уграђене функције: функција ``len``
рачуна дужину низа, док функција ``sum`` рачуна збир елемената низа бројева.
Како ћемо у много наврата рачунати просек, показаћемо како се дефинише функција која га рачуна:

.. code-block:: python

   def prosek(L):
       return sum(L) / len(L)

Пример.
'''''''

Мирко из музичког има 5, 4, 5 и још једну оцену која се не види јер се преко ње разлило мастило.
Просек његових оцена из музичког је 4. Која је то оцена преко које се разлило мастило?

*Решење.* Испробаћемо разне могућности:

.. activecode:: primer2-7
   :coach:

   def prosek(L):
       return sum(L) / len(L)

   print("Prvi pokusaj:",    prosek([5,4,5,  5]))
   print("Drugi pokusaj:",   prosek([5,4,5,  4]))
   print("Treci pokusaj:",   prosek([5,4,5,  3]))
   print("Cetvrti pokusaj:", prosek([5,4,5,  2]))
   print("Peti pokusaj:",    prosek([5,4,5,  1]))

Која је то оцена?

Задаци
-----------

Задатак 1.
''''''''''

Напиши Пајтон функцију ``broj_pozitivnih`` која утврђује колико у датом низу има позитивних бројева. На пример,
``broj_pozitivnih([2, -1, 3, 0, -5, 1, 9])`` треба да врати 4.

.. activecode:: zadatak2-1
   :coach:

   def broj_pozitivnih(L):
       ???

   # Провера
   print(broj_pozitivnih([1, 2, 3, 4]))
   print(broj_pozitivnih([-1, -2, -3, -4]))
   print(broj_pozitivnih([2, -1, 3, 0, -5, 1, 9]))



Задатак 2.
''''''''''

Написати Пајтон функцију ``broj_prestupnih`` која прими две године и утврди колико преступних година има у
наведеном интервалу. На пример, ``broj_prestupnih(1987, 2019)`` треба да врати 8.
У томе ће ти помоћи функција ``prestupna_godina`` која проверава да ли је година преступна.

.. activecode:: zadatak2-2
   :coach:

   def prestupna_godina(g):
       if g % 400 == 0 or (g % 100 != 0 and g % 4 == 0):
           return True
       else:
           return False

   def broj_prestupnih(g1, g2):
       ???

   # Провера
   print(broj_prestupnih(1987, 2019))
   print(broj_prestupnih(2019, 2021))
   print(broj_prestupnih(1997, 2003))


Задатак 3.
''''''''''

Напиши функцију ``prebroj_max(A)`` која утврђује колико пута се у датом низу бројева појављује највећа вредност низа.
(Напомена: највећи елемент низа се може израчунати помоћу функције ``max``.)

.. activecode:: zadatak2-3
   :coach:

   def prebroj_max(A):
       ???

   # Провера
   print(prebroj_max([1, 2, 3, 2, 3, 3, 3]))
   print(prebroj_max([0, 0, 0]))
   print(prebroj_max([5]))


Задатак 4.
''''''''''

Напиши функцију ``zbir_cifara`` која рачуна збир цифара датог позитивног целог броја. На пример,
``zbir_cifara(12487)`` треба да врати 22.

.. activecode:: zadatak2-4
   :coach:

   def zbir_cifara(n):
       ???

   # Провера
   print(zbir_cifara(2573))
   print(zbir_cifara(9))


Задатак 5*.
'''''''''''

*Судбински број* неке особе се добија овако:

1. Запишемо датум рођења те особе као један низ цифара, на пример: 15. мај 2001. --> 15052001
2. Саберемо цифре тог броја.
3. Ако смо добили једноцифрени број, то је судбински број особе.
4. Ако нисмао добили једноцифренi број саберемо цифре добијеног броја, и тако све док не добијемо једноцифрени број.

**Важна напомена!** Ово је само вежбица из програмирања у Пајтону. Немојте придавати никакав значај добијеном броју! Нумерологија је изашла из моде пре око хиљаду година.


*(а)* Израчунај свој судбински број користећи функцију `zbir_cifara` из претходног задатка.

.. activecode:: zadatak2-5а
   :coach:

   def zbir_cifara(n):
       # овде ископирај функцију zbir_cifara из претxодног задатка

   # уместо три упитника унеси број који одговара твом датуму рођења
   print(zbir_cifara(???))
   
   # понови поступак ако ниси добио једноцифрени број

*(б)* Напиши функцију ``sudbinski_broj`` која рачуна судбински број неке особе на основу броја који одговара њеном датуму рођења.

.. activecode:: zadatak2-5b
   :coach:

   def zbir_cifara(n):
       # овде ископирај функцију zbir_cifara из претxодног задатка

   def sudbinski_broj(n):
       ???

   # Провера
   print(sudbinski_broj(10102010))
   print(sudbinski_broj(29091999))
   # уместо три упитника унеси број који одговара твом датуму рођења
   # и упореди са резултатом под (а)
   print(sudbinski_broj(???))   

Задатак 6*.
'''''''''''

 Милorad у дневнику има неколико оцена из информатике. Напиши Пајтон функцију ``koliko_do_odlicnog_uspeha``
 која прима низ Милорадових оцена и онда одређује који је најмањи број петица које Милорад треба да добије из информатике
 да би наставник морао да му закључи 5. (Према Правилнику о оцењивању, наставник мора да закључи оцену 5
 ученику чији просек оцена је барем 4,50.)
 
 На пример, ``koliko_do_odlicnog_uspeha([3,3])`` треба да врати 6 јер је (3 + 3 + 5 + 5 + 5 + 5 + 5 + 5) / 8 = 4,50.

.. activecode:: zadatak2-6
   :coach:

   def prosek(A):
       return sum(A) / len(A)

   def koliko_do_odlicnog_uspeha(A):
       ???

   # Провера
   print(koliko_do_odlicnog_uspeha([4]))
   print(koliko_do_odlicnog_uspeha([4, 4]))
   print(koliko_do_odlicnog_uspeha([3, 3]))
   print(koliko_do_odlicnog_uspeha([5, 5, 5]))
