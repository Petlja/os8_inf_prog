Сортирање, филтрирање и фреквенцијска анализа
==============================================


У овој лекцији ћемо говорити о:

1. преуређивању редова табеле како би се поређали по величини по неком критеријуму (*сортирање*);
2. издвајању редова табеле који задовољавају неке услове (*филтрирање*); и
3. бројању редова табеле који имају неке особине (*фреквенцијска анализа*).

Сортирање података
-------------------

*Сортирати податке* значи поређати их по величини. Да бисмо видели како се то ради у библиотеци *pandas* прво ћемо учитати библиотеку:

.. ipython::

   In [1]: import pandas as pd

а онда ћемо направити табелу са подацима о групи деце коју смо већ користили, колонама ћемо дати одговарајућа имена и индексираћемо табелу именима деце:

.. ipython::

   In [1]: podaci = [["Ana",     "ž", 13, 46, 160],
      ...:           ["Bojan",   "m", 14, 52, 165],
      ...:           ["Vlada",   "m", 13, 47, 157],
      ...:           ["Gordana", "ž", 15, 54, 165],
      ...:           ["Dejan",   "m", 15, 56, 163],
      ...:           ["Đorđe",   "m", 13, 45, 159],
      ...:           ["Elena",   "ž", 14, 49, 161],
      ...:           ["Žaklina", "ž", 15, 52, 164],
      ...:           ["Zoran",   "m", 15, 57, 167],
      ...:           ["Ivana",   "ž", 13, 45, 158],
      ...:           ["Jasna",   "ž", 14, 51, 162]]
      ...: tabela = pd.DataFrame(podaci)
      ...: tabela.columns=["Ime", "Pol", "Starost", "Masa", "Visina"]
      ...: tabela1 = tabela.set_index("Ime")

Ево како табела изгледа:

.. ipython::

   In [1]: tabela1

Хајде сада да сортирамо табелу по висини употребом функције ``sort_values`` (енгл. *sort* значи "сортирај, поређај по величини", док *values* значи "вредности").

Овој функцији морамо да кажемо по ком критеријуму се сортирају подаци (по висини, тежини, старости, ...) тако што име одговарајуће колоне наведемо као вредност аргумента ``by`` (енгл. реч "by" значи свашта, али у овом контексту значи "према").

Функција не мења полазну табелу, већ од ње прави нову:

.. ipython::

   In [1]: tabela1_po_visini = tabela1.sort_values(by="Visina")
      ...: tabela1_po_visini

Пошто нисмо навели како желимо да сортирамо податке (од најмањег ка највећем, или обрнуто) подаци су сортирани од најмањег ка највећем. Уколико желимо да сортирамо табелу по висини, али од највеће ка најмањој, потребно је то нагласити користећи параметар ``ascending=False`` (енгл. *ascending* значи "растуће").

.. ipython::

   In [1]: tabela1_po_visini = tabela1.sort_values(by="Visina", ascending=False)
      ...: tabela1_po_visini

Хајде, за крај, да прикажемо податке из овако сортиране табеле.

.. ipython::
   :okwarning:

   @savefig J09slika1.png
   In [1]: import matplotlib.pyplot as plt
      ...: plt.figure(figsize=(10,5))
      ...: plt.bar(tabela1_po_visini.index, tabela1_po_visini["Visina"], label="Visina")
      ...: plt.bar(tabela1_po_visini.index, tabela1_po_visini["Masa"], label="Masa")
      ...: plt.title("Visina i masa dece u grupi")
      ...: plt.legend()
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

Ево и кратке видео илустрације:

.. ytpopup:: w36_KIyOG1Q
   :width: 735
   :height: 415
   :align: center


Филтрирање података
--------------------


Често је из табеле потребно издвојити редове који имају неке особине. На пример, ако желимо да издвојимо само оне редове табеле у којима су наведени подаци о девојчицама, то можемо урадити на следећи начин:

.. code-block:: python

    tabela1[tabela1.Pol == "ž"]


Овај израз ће из табеле ``tabela1`` издвојити све редове код којих у колони "Pol" пише "ž". (Обратите пажњу на то да се приликом формирања критеријума у изразу ``tabela1.Pol`` не пишу наводници! Не питајте зашто...)

.. ipython::

   In [1]: devojke = tabela1[tabela1.Pol == "ž"]
      ...: devojke

На сличан начин можемо да издвојимо сву децу која имају преко 50 кг:

.. ipython::

   In [1]: preko_50kg = tabela1[tabela1.Masa > 50]
      ...: preko_50kg

Критеријуме можемо и да комбинујемо. На пример, ако желимо да из табеле извучемо податке о свим дечацима са највише 55 кг треба из табеле да издвојимо податке који задовољавају два критеријума:

.. code-block:: text

    Masa <= 55  и  Pol == "m".


Логички везник "и" се у библиотеци ``pandas`` означава симболом ``&``. Према томе, податке добијамо тако што табели проследимо следећи захтев за филтрирање:

.. ipython::

   In [1]: decaci_do_55kg = tabela1[(tabela1.Masa <= 55) & (tabela1.Pol == "m")]
      ...: decaci_do_55kg

Приказаћемо, за крај, податке о маси и висини ових дечака једним графиконом:

.. ipython::
   :okwarning:

   @savefig J09slika2.png
   In [1]: plt.figure(figsize=(6,6))
      ...: plt.bar(decaci_do_55kg.index, decaci_do_55kg["Visina"], label="Visina")
      ...: plt.bar(decaci_do_55kg.index, decaci_do_55kg["Masa"], label="Masa")
      ...: plt.title("Visina i masa dečaka do 55 kg u grupi")
      ...: plt.legend()
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

Ево и кратке видео илустрације:

.. ytpopup:: 00BmAAE34vQ
   :width: 735
   :height: 415
   :align: center

Фреквенцијска анализа
----------------------



Да се подсетимо, фреквенцијска анализа низа података се своди на то да се преброји колико се пута који податак појављује у низу.  Док смо раније морали доста тога сами да урадимо, библиотека ``pandas`` има функцију ``value_counts`` која врши фреквенцијску анализу (енгл. *value* значи "вредност", док *count* значи "бројати"; дакле, пребројати вредности).

Ево примера. Ако у табели са којом радимо желимо да пребројимо дечаке и девојчице, то можемо учинити позивом функције ``value_counts`` овако:

.. ipython::

   In [1]: tabela1["Pol"].value_counts()

Функција ``value_counts`` је у колони "Pol" пребројала све вредности и утврдила да се у тој колони вредност "ž" појављује 6 пута, док се вредност "m" појављује 5 пута.

Ако желимо да утврдимо старосну структуру групе, применићемо функцију ``value_counts`` на колону "Starost":

.. ipython::

   In [1]: tabela1["Starost"].value_counts()

Функција ``value_counts`` је у колони "Starost" пребројала све вредности и утврдила да се у тој колони вредности 15 и 13 појављују по 4 пута, док се вредност 14 појављује 3 пута.

Ако резултат рада функције ``value_counts`` сместимо у променљиву:

.. ipython::

   In [1]: frekv = tabela1["Pol"].value_counts()
      ...: frekv

онда можемо лако да реконструишемо које су вредности уочене у табели, и које су њихове фреквенције. Наиме,

.. code-block:: python

    frekv.index


нам даје листу уочених вредности, док

.. code-block:: python

    frekv.values

даје њихове фреквенције.

.. ipython::

   In [1]: print("Vrednosti koje se javljaju u koloni:", frekv.index)
      ...: print("Njihove frekvencije:", frekv.values)

Полну структуру ове групе деце можемо да прикажемо секторским дијаграмом овако:

.. ipython::
   :okwarning:

   @savefig J09slika3.png
   In [1]: import matplotlib.pyplot as plt
      ...: frekv = tabela1["Pol"].value_counts()
      ...: plt.figure(figsize=(6,6))
      ...: plt.pie(frekv.values, labels=frekv.index)
      ...: plt.title("Polna struktura grupe")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

На сличан начин можемо да прикажемо старосну структуру групе:

.. ipython::
   :okwarning:

   @savefig J09slika4.png
   In [1]: frekv = tabela1["Starost"].value_counts()
      ...: plt.figure(figsize=(6,6))
      ...: plt.pie(frekv.values, labels=frekv.index)
      ...: plt.title("Starosna struktura grupe")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()


Следе две кратке видео илустрације:

.. ytpopup:: UOKOYyfw8Rw
   :width: 735
   :height: 415
   :align: center

.. ytpopup:: vCGkTXeSv5E
   :width: 735
   :height: 415
   :align: center



На адреси

.. code-block:: text

    https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv

се налази јавно доступан списак свих држава на свету. Ову табелу можемо лако учитати наредбом ``read_csv``:

.. ipython::

   In [1]: drzave = pd.read_csv("https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv")
      ...: drzave.head(5)

Број држава по континентима можемо видети овако:

.. ipython::

   In [1]: drzave["Region"].value_counts()

Прикажимо број држава по континентима секторским дијаграмом:

.. ipython::
   :okwarning:

   @savefig J09slika5.png
   In [1]: import matplotlib.pyplot as plt
      ...: po_kontinentima = drzave["Region"].value_counts()
      ...: plt.figure(figsize=(8,8))
      ...: plt.pie(po_kontinentima.values, labels=po_kontinentima.index)
      ...: plt.title("Број држава по континентима")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()


Задаци
-------

За вежбу покрени Џупитер окружење и реши задатке из радне свеске J09.ipynb