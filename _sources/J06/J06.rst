Табеларно представљени подаци
==============================


У овој лекцији ћемо говорити о:

1. представљању табеларно задатих података помоћу листи у Пајтону,
2. ефикаснијем представљању табеларних података користећи библиотеку *pandas*,
3. визуелизацији табеларно представљених података, и
4. учитавање табела из локалних и удаљених ресурса.

Представљање табеларно задатих података помоћу листи
-----------------------------------------------------


Најчешћи начин да организујемо велике количине података је да их представимо табелом. Рецимо, ова табела садржи податке о једној групи деце (при чему је, наравно, старост изражена у годинама, тежина у килограмима, а висина у центиметрима):

.. csv-table:: Подаци о једној групи деце
   :header: "Ime", "Pol", "Starost", "Masa", "Visina"
   :align: left

   "Ana", "ž", "13", "46", "160"
   "Bojan", "m", "14", "52", "165"
   "Vlada", "m", "13", "47", "157"
   "Gordana", "ž", "15", "54", "165"
   "Dejan", "m", "15", "56", "163"
   "Đorđe", "m", "13", "45", "159"
   "Elena", "ž", "14", "49", "161"
   "Žaklina", "ž", "15", "52", "164"
   "Zoran", "m", "15", "57", "167"
   "Ivana", "ž", "13", "45", "158"
   "Jasna", "ž", "14", "51", "162"


Да бисмо могли машински да обрађујемо и анализирамо податке прво их морамо представити у облику неке структуре података. Један једноставан начин да се то уради је да сваки ред табеле представимо једном листом, и да потом све те листе запакујемо у једну велику листу, рецимо овако:

.. ipython::

   In [1]: podaci = [["Ana",     "ž", 13, 46, 160],
      ...:           ["Bojan",   "m", 14, 52, 165],
      ...:           ["Vlada",   "m", 13, 47, 157],
      ...:           ["Gordana", "ž", 15, 54, 165],
      ...:           ["Dejan",   "m", 15, 56, 163],
      ...:           ["Đorđe",   "m", 13, 45, 159],
      ...:           ["Elena",   "ž", 14, 49, 161],
      ...:           ["Žaklina", "ž", 15, 52, 164],
      ...:           ["Zoran",   "m", 15, 57, 167],
      ...:           ["Ivana",   "ž", 13, 45, 158],
      ...:           ["Jasna",   "ž", 14, 51, 162]]

Из овако представљених података лако можемо добити податке о сваком појединачном детету у групи. Рецимо, податке о Дејану добијамо тако што испишемо елемент листе са индексом 4 (*Пажња! Први елемент листе има индекс 0, зато подаци о Дејану који су наведени у 5. реду табеле имају индекс 4*):

.. ipython::

   In [1]: podaci[4]

Овај начин представљања података, међутим, није погодан за обраде по колонама. Рецимо, ако желимо да израчунамо просечну висину деце у групи морамо да пишемо програм. То није немогуће, чак није ни тешко, али је непрактично. Ево програма:

.. ipython::

   In [1]: sum = 0
      ...: for dete in podaci:
      ...:     sum += dete[4]
      ...: float(sum) / len(podaci)

Програм ради на следећи начин:

* прво помоћну променљиву ``sum`` поставимо на нулу (у њој ће се полако акумулирати збир висина све деце у групи);
* након тога циклус ``for dete in podaci:`` прође кроз свако дете у групи (јер сваки елемент листе ``podaci`` представља податке о једном детету) и на суму дода његову висину (висина детета се налази на петом месту у групи података за то дете, а то је елемент листе са индексом 4);
* коначно, добијени збир поделимо бројем података да бисмо израчунали просек.

Као што смо већ рекли, ово није јако тешко, али је непрактично. Треба нам флексибилнија структура података.

Библиотека *pandas*, структура података *DataFrame* и рад са колонама табеле
-----------------------------------------------------------------------------


За ефикасно манипулисање табеларно представљеним подацима у Пајтону развијена је библиотека *pandas*. Њу можемо увести као што смо увозили и остале библиотеке (и уз пут ћемо јој дати надимак да бисмо мање морали да куцамо):

.. ipython::

   In [1]: import pandas as pd

Из ове библиотеке ћемо користити структуру података која се зове *DataFrame* (енгл. *data* значи "подаци", *frame* значи "оквир", тако да *DataFrame* значи "оквир са подацима", односно "табела").

Податке о деци сада лако можемо да препакујемо у *DataFrame* позивом функције са истим именом:

.. ipython::

   In [1]: tabela = pd.DataFrame(podaci)

Претходна команда није дала никакав излаз. Она је просто препаковала податке наведене у листи ``podaci`` у нову структуру података. Да бисмо се уверили да се ради само о препакивању, исписаћемо садржај променљиве ``tabela``:

.. ipython::

   In [1]: tabela

Ево и кратког видеа:

.. ytpopup:: _AJYNXq53hk
   :width: 735
   :height: 415
   :align: center

Да би табела била прегледнија, даћемо колонама име. Колонама се име даје овако:

.. ipython::

   In [1]: tabela = pd.DataFrame(podaci)
      ...: tabela.columns=["Ime", "Pol", "Starost", "Masa", "Visina"]
      ...: tabela

Када свака колона има своје име, можемо да приступимо појединачним колонама:

.. ipython::

   In [1]: tabela["Ime"]


.. ipython::

   In [1]: tabela["Visina"]

Имена свих колона су увек доступна у облику листе овако:

.. ipython::

   In [1]: tabela.columns

Позивом једне од следећих функција лако можемо да вршимо елементарну анализу података који су представљени табелом:

* ``sum`` -- рачуна збир елемената у колони (сума);
* ``mean`` -- рачуна просек елемената у колони (аритметичка средина се на енглеском каже *arithmetic mean*);
* ``median`` -- рачуна медијану елемената у колони;
* ``min`` -- рачуна вредност најмањег елемента у колони (минимум);
* ``max`` -- рачуна вредност највећег елемента у колони (максимум).

На пример, висина најнижег детета у групи је:

.. ipython::

   In [1]: tabela["Visina"].min()

Најстарије дете у групи има оволико година:

.. ipython::

   In [1]: tabela["Starost"].max()

Просечна висина деце у групи је:

.. ipython::

   In [1]: tabela["Visina"].mean()

Медијална висина:

.. ipython::

   In [1]: tabela["Visina"].median()

Да ли цела група може да стане у лифт чија носивост је 600 кг?

.. ipython::

   In [1]: if tabela["Masa"].sum() <= 600:
      ...:     print("Mogu svi da stanu u lift.")
      ...: else:
      ...:     print("Ne. Zajedno su preteški.")


Визуелизација табеларно представљених података
-----------------------------------------------

Визуелизација података из табеле се своди на то да се одаберу интересантне колоне табеле и прикажу неком од техника које смо раније видели. Прво ћемо учитати одговарајућу библиотеку:

.. ipython::

   In [1]: import matplotlib.pyplot as plt

Ако желимо хистограмом да представимо висину деце у групи, одабраћемо колоне "Име" и "Висина" и приказати их, рецимо овако:

.. ipython::
   :okwarning:

   @savefig J06slika1.png
   In [1]: plt.figure(figsize=(10,5))
      ...: plt.bar(tabela["Ime"], tabela["Visina"])
      ...: plt.title("Visina dece u grupi")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

Као други пример представићемо тежину и старост деце у групи тако да тежина буде представљена црвеним стубићима, а старост зеленом. Приказаћемо и легенду да би било јасно шта која боја представља.

.. ipython::
   :okwarning:

   @savefig J06slika2.png
   In [1]: plt.figure(figsize=(10,5))
      ...: plt.bar(tabela["Ime"], tabela["Masa"], color="r", label="Masa")
      ...: plt.bar(tabela["Ime"], tabela["Starost"], color="g", label="Starost")
      ...: plt.title("Starost i masa dece u grupi")
      ...: plt.legend()
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

Ево и кратког видеа:

.. ytpopup:: xpmbKEcZplc
   :width: 735
   :height: 415
   :align: center

Учитавање података из локалних датотека и удаљених ресурса
-------------------------------------------------------------


Видели смо у претходним примерима да се најмукотрпнији посао обраде података састоји у томе да се подаци унесу у табелу.
То је досадан посао који се често састоји у томе да се подаци просто прекуцају.
Табеле са којима смо се сретали су зато биле веома мале. Модерна обрада података се, међутим, све више усмерава на
анализу *огромних* количина података (енгл. *big data*) и ту прекуцавање података не долази у обзир.

Подаци се данас углавном прикупљају аутоматски, и програми за прикупљање података генеришу велике табеле података које
после треба обрађивати. Постоје разни формати за табеларно представљање података, а најједноставнији од њих се зове *CSV*,
(од енгл. *comma separated values* што значи "вредности раздвојене зарезима").

*CSV* датотека је текстуална датотека у којој редови одговарају редовима табеле, а подаци унутар истог реда су
раздвојени зарезима. На пример, датотека *Top25YouTubers.csv*
садржи податке о о 25 најпопуларнијих Јутјубера према броју претплатника на дан 1.7.2019.
Она изгледа овако:

.. code-block:: text

    RANK,GRADE,NAME,VIDEOS,SUBSCRIBERS,VIEWES
    1,A++,T-Series,13629,105783888,76945588449
    2,A,PewDiePie,3898,97853589,22298927681
    3,A+,5-Minute Crafts,3341,58629572,14860695079
    4,A++,Cocomelon - Nursery Rhymes,441,53163816,33519273951
    ...
    25,A,TheEllenShow,10542,33362512,16519572219

Први ред табеле представља заглавље табеле које нам каже да табела има шест колона
(RANK, GRADE, NAME, VIDEOS, SUBSCRIBERS, VIEWES). Врста

.. code-block:: text

    4,A++,Cocomelon - Nursery Rhymes,441,53163816,33519273951


значи да је на дан 1.7.2019. четврти по реду био Јутјуб канал са Јутјуб рангом А++ који се зове "Cocomelon - Nursery Rhymes" који је објавио укупно 441 видео на Јутјубу, који има 53.163.816 претплатника и 33.519.273.951 прегледа.

Библиотека ``pandas`` има функцију ``read_csv`` која учитава *CSV* датотеку и од ње прави табелу типа *DataFrame*.
Уколико се датотека налази на локалној машини, у фолдеру у коме се налази и Џупитер радна свеска из које јој приступамо, онда
се датотека учитава на следећи начин:

.. code-block:: python

   import pandas as pd
   Top25 = pd.read_csv("Top25YouTubers.csv")

Учитавање података из локалних датотека је илустровано у следећем кратком видеу:

.. ytpopup:: bbPo9Dujtc8
   :width: 735
   :height: 415
   :align: center

а провежбаћемо га на крају ове лекције, у склопу задатака које треба урадити у Џупитер радној свесци.

С друге стране, иста та датотека се налази и на следећем линку:

`https://petljamediastorage.blob.core.windows.net/root/Media/Default/Kursevi/informatika_VIII/podaci/Top25YouTubers.csv <https://petljamediastorage.blob.core.windows.net/root/Media/Default/Kursevi/informatika_VIII/podaci/Top25YouTubers.csv>`_

Библиотека ``pandas`` омогућује да се подаци преузму и са удаљених ресурса без потребе да се они прво пребаце на локалну
машину. Да бисмо приступили податку који се налази на некој другој машини потребно је да обе машине имају приступ Интернету и да знамо тачну локацију податка на удаљеној машини. Тачна локација било ког ресурса на Интернету је описана његовим *URL*-ом (од енгл. *Universal Resource Locator*, што значи "Универзални локатор ресурса").

Ево примера:

.. ipython::

   In [1]: import pandas as pd
      ...: Top25 = pd.read_csv("https://petljamediastorage.blob.core.windows.net/root/Media/Default/Kursevi/informatika_VIII/podaci/Top25YouTubers.csv")

Прикажимо првих неколико редова ове табеле. Функција ``head(N)`` приказује првих N редова табеле (енгл. *head* значи "глава"). Ако функцију позовемо без броја она ће приказати првих пет редова:

.. ipython::

   In [1]: Top25.head()


.. ipython::

   In [1]: Top25.head(10)

Функција ``tail(N)`` приказује последњих N редова табеле, односно, последњих пет редова ако је позвемо без аргумента (енгл. *tail* значи "реп"):

.. ipython::

   In [1]: Top25.tail()


.. ipython::

   In [1]: Top25.tail(7)

Прикажимо податке о броју претплатника стубичастим дијаграмом:

.. ipython::
   :okwarning:

   @savefig J06slika3.png
   In [1]: plt.figure(figsize=(15,10))
      ...: plt.bar(Top25["NAME"], Top25["SUBSCRIBERS"])
      ...: plt.title("Top 25 YouTube kanala prema broju pretplatnika")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()

Пошто су имена канала веома дугачка на хоризонталној оси се ништа не види. Зато ћемо уместо функције ``bar`` позвати функцију ``barh`` која ради исти посао, али стубиће исцртава хоризонтално:

.. ipython::
   :okwarning:

   @savefig J06slika4.png
   In [1]: plt.figure(figsize=(10,10))
      ...: plt.barh(Top25["NAME"], Top25["SUBSCRIBERS"])
      ...: plt.title("Top 25 YouTube kanala prema broju pretplatnika")
      ...: plt.show()

.. ipython::
   :suppress:

   In [1]: plt.close()


Пример.
''''''''

На адреси

.. code-block:: text

    https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv

се налази јавно доступан списак свих држава на свету. Ову табелу можемо лако учитати наредбом ``read_csv``:

.. ipython::

   In [1]: drzave = pd.read_csv("https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv")
      ...: drzave.head(10)

Помоћу наредбе ``read_html`` може се прочитати и табела директно из *HTML* кода неке веб странице. Рецимо, следећа наредба чита списак свих федералних јединица Сједињених Америчких Држава са одговарајуће странице Википедије:

.. ipython::

   In [1]: US = pd.read_html("https://simple.wikipedia.org/wiki/List_of_U.S._states", header=[0,1])[0]

На веб страни коју читамо може бити више табела и зато функција ``read_html`` враћа *листу табела*. Табела коју желимо да видимо је прва на наведеној страни и зато иза наредбе следи конструкт ``[0]``. Аргумент ``header=[0,1]`` значи да прве две врсте треба узети за заглавље табеле. Ево како изгледа табела:

.. ipython::

   In [1]: US.head()

Ево и кратке видео илустрације:

.. ytpopup:: SivimRYskH0
   :width: 735
   :height: 415
   :align: center


Задаци
-------

За вежбу покрени Џупитер окружење и реши задатке из радне свеске J06.ipynb

