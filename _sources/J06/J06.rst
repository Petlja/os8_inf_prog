Представљање табела помоћу листи (није ефикасно)
============================================================


Најчешћи начин да организујемо велике количине података је да их представимо табелом. Рецимо, ова табела садржи податке о једној групи деце (при чему је, наравно, старост изражена у годинама, тежина у килограмима, а висина у центиметрима):

.. csv-table:: Подаци о једној групи деце
   :header: "Ime", "Pol", "Starost", "Masa", "Visina"
   :align: left

   "Ana", "ž", "13", "46", "160"
   "Bojan", "m", "14", "52", "165"
   "Vlada", "m", "13", "47", "157"
   "Gordana", "ž", "15", "54", "165"
   "Dejan", "m", "15", "56", "163"
   "Đorđe", "m", "13", "45", "159"
   "Elena", "ž", "14", "49", "161"
   "Žaklina", "ž", "15", "52", "164"
   "Zoran", "m", "15", "57", "167"
   "Ivana", "ž", "13", "45", "158"
   "Jasna", "ž", "14", "51", "162"


Да бисмо могли машински да обрађујемо и анализирамо податке прво их морамо представити у облику неке структуре података. Један једноставан начин да се то уради је да сваки ред табеле представимо једном листом, и да потом све те листе запакујемо у једну велику листу, рецимо овако:

.. ipython::

   In [1]: podaci = [["Ana",     "ž", 13, 46, 160],
      ...:           ["Bojan",   "m", 14, 52, 165],
      ...:           ["Vlada",   "m", 13, 47, 157],
      ...:           ["Gordana", "ž", 15, 54, 165],
      ...:           ["Dejan",   "m", 15, 56, 163],
      ...:           ["Đorđe",   "m", 13, 45, 159],
      ...:           ["Elena",   "ž", 14, 49, 161],
      ...:           ["Žaklina", "ž", 15, 52, 164],
      ...:           ["Zoran",   "m", 15, 57, 167],
      ...:           ["Ivana",   "ž", 13, 45, 158],
      ...:           ["Jasna",   "ž", 14, 51, 162]]

Из овако представљених података лако можемо добити податке о сваком појединачном детету у групи. Рецимо, податке о Дејану добијамо тако што испишемо елемент листе са индексом 4 (*Пажња! Први елемент листе има индекс 0, зато подаци о Дејану који су наведени у 5. реду табеле имају индекс 4*):

.. ipython::

   In [1]: podaci[4]

Овај начин представљања података, међутим, није погодан за обраде по колонама. Рецимо, ако желимо да израчунамо просечну висину деце у групи морамо да пишемо програм. То није немогуће, чак није ни тешко, али је непрактично. Ево програма:

.. ipython::

   In [1]: sum = 0
      ...: for dete in podaci:
      ...:     sum += dete[4]
      ...: float(sum) / len(podaci)

Програм ради на следећи начин:

* прво помоћну променљиву ``sum`` поставимо на нулу (у њој ће се полако акумулирати збир висина све деце у групи);
* након тога циклус ``for dete in podaci:`` прође кроз свако дете у групи (јер сваки елемент листе ``podaci`` представља податке о једном детету) и на суму дода његову висину (висина детета се налази на петом месту у групи података за то дете, а то је елемент листе са индексом 4);
* коначно, добијени збир поделимо бројем података да бисмо израчунали просек.

.. infonote::

   Као што смо већ рекли, ово није јако тешко, али је непрактично. Треба нам флексибилнија структура података.

